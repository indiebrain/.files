#+TITLE: Dotfiles Configuration

Shell and CLI Tooling configuration

* bashrc

  :PROPERTIES:
  :header-args: :tangle ~/.bashrc
  :END:

** CLI Colors

   For commands that support colors, enable the use of colors to
   better visually understand the output of commands.

   #+BEGIN_SRC sh
     export CLICOLOR=1
   #+END_SRC


** $PATH

*** /usr/local/bin

   Binaries stored in the =/usr/local/bin= directory take precedence
   over their counterparts stored elsewhere on the =PATH=

   #+BEGIN_SRC sh
     export PATH=/usr/local/bin:/usr/local/sbin:$PATH
   #+END_SRC


*** bin

   I keep personal scripts in =~/bin=. Ensure that scripts found in
   =~/bin= are available on the =PATH= so they can be executed
   without providing full paths:

   For example, instead of typing =~/bin/script-name= simply type
   =script-name=.

   #+BEGIN_SRC sh
     export PATH=$PATH:$HOME/bin
   #+END_SRC



** Aliases

*** *nix aliases

**** ls

  Make =ls= output more information about files and directories in a
  human readable format.

  #+BEGIN_SRC sh
    if [ `uname` == "Linux" ]; then
        alias ls='ls --color'
    fi
  #+END_SRC

**** grep

  Make =grep= highlight matches.

  #+BEGIN_SRC sh
    if [ `uname` == "Linux" ]; then
        alias grep='grep --color'
    fi
  #+END_SRC

**** pbcopy

  On linux systems, add a shorthand to copy data to the system clipboard on the clicolor

  #+BEGIN_SRC sh
    if [ `uname` == "Linux" ]; then
        alias pbcopy='xclip -selection clipboard'
    fi
  #+END_SRC

*** Git aliases

   =gs= is shorthand for the status of a git repository.

   #+BEGIN_SRC sh
     alias gs="git status"
   #+END_SRC

   =gl= shows the railroad tracks of the current head ref

   #+BEGIN_SRC sh
     alias gl='git log --graph --oneline --decorate --max-count 10'
   #+END_SRC


** Prompt

  Configure the shell prompt. This happens to check if we're in a git
  managed directory and adds some status info to the command line.

  #+BEGIN_SRC sh
    # Get a graphical representation of the clean/dirty state of a git repository
    function parse_git_dirty {
      [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]] && echo -e '\033[31m✪\033[0m'|| echo -e '\033[32m✪\033[0m'
    }

    # Get the name of the current git brank
    function parse_git_branch {
      git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[ \1 $(parse_git_dirty) ]/"
    }

    # Set the prompt pattern
    export PS1='
    \[\033[0;32m\]\@\[\033[0m\] \[\033[1;33m\]\w\[\033[0m\] $(parse_git_branch)
    => '
  #+END_SRC


** Editors

   Use emacs as the default editor for the shell

   #+BEGIN_SRC sh
     export EDITOR=emacs
   #+END_SRC


** History

*** Store Unique Commands

    Store only unique commands in bash history. Also provide a way to
    manually exclude commands from being recorded in the history. To do
    this, prefix the command with whitespace.

     #+BEGIN_SRC sh
       export HISTCONTROL=ignoreboth:erasedups
     #+END_SRC


*** Number of History Entries

    Set the number of commands which can be stored in the history.

    #+BEGIN_SRC sh
      export HISTSIZE=1000
      export HISTFILESIZE=1000
    #+END_SRC


** exenv

*** elixir installation path

  Use the [[https://github.com/mururu/exenv][exenv]] project to manage local [[http://elixir-lang.org/][Elixir]] installations.

  Store installations in =/usr/local/var/exenv= instead of the user
  home directory so they're available to all users of the system.

  #+BEGIN_SRC sh
    export "EXENV_ROOT=/usr/local/var/exenv"
  #+END_SRC


*** exenv initialization

  If the =exenv= command is available initialize the exenv
  system. This provides access to shims and autocompletion.

  #+BEGIN_SRC sh
    if which exenv > /dev/null; then eval "$(exenv init -)"; fi
  #+END_SRC



** rbenv

*** ruby installation path

  Use the [[https://github.com/rbenv/rbenv][rbenv]] project to manage local [[https://www.ruby-lang.org][Ruby]] installations.

  Store installations in the user home directory.

  #+BEGIN_SRC sh
    RBENV_ROOT=$HOME/.rbenv
    export PATH="$HOME/.rbenv/bin:$PATH"
  #+END_SRC


*** rbenv initialization

  If the =rbenv= command is available initialize the rbenv
  system. This provides access to shims and autocompletion.

  #+BEGIN_SRC sh
    if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
  #+END_SRC


** ruby

   Too many times have I been bitten by the [[https://github.com/rails/spring][spring]] gem. Kill it with fire.

   #+BEGIN_SRC sh
     DISABLE_SPRING=1
   #+END_SRC


** rust

   #+BEGIN_SRC sh
     export PATH="$HOME/.cargo/bin:$PATH"
   #+END_SRC


** nvm

   #+BEGIN_SRC sh
     export NVM_DIR="$HOME/.nvm"
     [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
     [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
   #+END_SRC


** exercism

   Load the exercism bash completions if they exits

   #+BEGIN_SRC sh
     if [ -f ~/.config/exercism/exercism_completion.bash ]; then
         source ~/.config/exercism/exercism_completion.bash
     fi
   #+END_SRC


* bash_profile

  :PROPERTIES:
  :header-args: :tangle ~/.bash_profile
  :END:

  Use the same configuration for =.bash_profile= as the =.bashrc=

  #+BEGIN_SRC sh
    if [ -f ~/.bashrc ];
    then source ~/.bashrc
    fi
  #+END_SRC


* gnome-terminal

  :PROPERTIES:
  :header-args: :tangle ~/.gruvbox-profile.dconf
  :END:

  This is my gnome-terminal configuration. This configuration will be
  tangled to ~/.gruvbox-profile.dconf. At some point I'll automate the
  installation, but for now to import the profile:

  1. Open gnome-terminal
  2. Create a new profile
  3. Take node of the UUID of the Profile
  4. Import the profile settings into the new profile
     =cat ~/.gruvbox-profile.dconf | dconf load /org/gnome/terminal/legacy/profiles:/:<profile-uuid-here>/=

  #+BEGIN_SRC text
    [/]
    foreground-color='rgb(235,219,178)'
    visible-name='Gruvbox'
    palette=['rgb(40,40,40)', 'rgb(204,36,29)', 'rgb(152,151,26)', 'rgb(184,187,38)', 'rgb(69,133,136)', 'rgb(177,98,134)', 'rgb(104,157,106)', 'rgb(168,153,132)', 'rgb(146,131,116)', 'rgb(251,73,52)', 'rgb(184,187,38)', 'rgb(250,189,47)', 'rgb(131,165,152)', 'rgb(211,134,155)', 'rgb(142,192,124)', 'rgb(235,219,178)']
    scroll-on-output=true
    use-system-font=true
    use-theme-colors=false
    scrollback-unlimited=false
    background-color='rgb(40,40,40)'
    audible-bell=false
  #+END_SRC


* git

  Git Configuration

** .gitconfig

   :PROPERTIES:
   :header-args: :tangle ~/.gitconfig
   :END:

*** Author

  Configure information used by git to determine how to write the
  author information for commits

  #+BEGIN_SRC conf
    [user]
      name = Aaron Kuehler
      email = aaron.kuehler@gmail.com
      signingkey = F76B135A9A380BA6
  #+END_SRC

*** Github Credentials

    Include credentials for CLI authentication with the github gist
    API

    #+BEGIN_SRC conf
      [include]
        path = ~/credentials/.github
    #+END_SRC


*** Core configuration

  In addition to any files included in a project's =.gitignore= file,
  also include those listed in the =~/.gitconfig.=

  Use Emacs as the commit editor

  #+BEGIN_SRC conf
    [core]
      excludesfile = ~/.gitignore
      editor = emacs -nw --eval '(global-git-commit-mode t)'
  #+END_SRC


*** Colors

  Enable coloring of git output

  #+BEGIN_SRC conf
    [color]
      ui = true
  #+END_SRC


*** Aliases

  Set aliases for frequently used git incantations.

  #+BEGIN_SRC conf
    [alias]
      co  = checkout
      cb  = checkout -b
      db  = branch -d
      rclone = clone --recursive
  #+END_SRC


*** Commit

  GPG Sign commits

  #+BEGIN_SRC conf
    [commit]
      gpgsign = true
  #+END_SRC

*** Clean

  Disable the safeguard flag when running =git clean=

  #+BEGIN_SRC conf
    [clean]
      requireForce = false
  #+END_SRC


*** Push

  Only push the current branch, rather than all
  branches, when =git push= is invoked.

  #+BEGIN_SRC conf
    [push]
      default = simple
  #+END_SRC


*** Filter

  #+BEGIN_SRC conf
    [filter "lfs"]
      clean = git-lfs clean %f
      smudge = git-lfs smudge %f
      required = true
  #+END_SRC


** .gitignore

   :PROPERTIES:
   :header-args: :tangle ~/.gitignore
   :END:

*** Mac OS Finder cache

  Never ever store Mac OS Finder metadata in a git repository.

  #+BEGIN_SRC text
    .DS_Store
  #+END_SRC


*** Emacs temp files

  Never store Emacs autosave and backup files in a git repository.

  #+BEGIN_SRC text
    ,*~
    .#*
    ,*#
  #+END_SRC


** tab completion

  Enable tab completion for the git.

  #+BEGIN_SRC sh
    GIT_TAB_COMPLETION_FILE=/usr/local/etc/bash_completion.d/git-completion.bash
    if [ -f $GIT_TAB_COMPLETION_FILE ];
       then source $GIT_TAB_COMPLETION_FILE
    fi
  #+END_SRC


* gem

  Ruby gems configuration

** Documentation

  When a gem is installed forego the generation of its documentation.

  #+BEGIN_SRC text :tangle ~/.gemrc
    gem: --no-document
  #+END_SRC


* Rspec

  rspec CLI configuration

** Color

  Enable colorized output

  #+BEGIN_SRC text :tangle ~/.rspec
    --color
  #+END_SRC


** Output format

  Output from spec runs should look like a progress bar

  #+BEGIN_SRC text :tangle ~/.rspec
    --format progress
  #+END_SRC


** Ordering

  Always run specs in a random order to ensure that examples are
  independent of one another.

  #+BEGIN_SRC text :tangle ~/.rspec
    --order random
  #+END_SRC


* Scripts

:PROPERTIES:
:header-args: :mkdirp yes
:END:

  Version controlled scripts used to automate various repetitive tasks

** Flush DNS cache

   Invalidates the local DNS cache:

*** Usage

   #+BEGIN_SRC sh
     $ flush_dns
   #+END_SRC

*** Source

    #+BEGIN_SRC sh :tangle ~/bin/flush_dns :shebang "#!/bin/bash"
      # Purpose:
      #   Flush the local DNS cache
      # Usage:
      #   $ flush_dns_cache

      if [[ `uname` == "Darwin" ]]; then
          sudo killall -HUP mDNSResponder
      fi
    #+END_SRC


** Refresh local git tags

   Ensures that a local git repository's tags are in sync with the
   remote origin

*** Usage

   #+BEGIN_SRC sh
     $ refresh_tags
   #+END_SRC


*** Source

   #+BEGIN_SRC sh :tangle ~/bin/refresh_tags :shebang "#!/bin/bash"
     # Purpose:
     #   Delete all local tags and refresh from origin
     # Usage:
     #   $ refresh_tags

     git tag -l | xargs git tag -d && git fetch
   #+END_SRC


* ssh

:PROPERTIES:
:header-args: :mkdirp yes
:END:

  Automatically load the private key into the ssh-agent and store
  passwords in the keychain.

  #+BEGIN_SRC text :tangle ~/.ssh/config
    Host *
     AddKeysToAgent yes
     UseKeychain yes
  #+END_SRC
