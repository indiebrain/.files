#! /usr/bin/env bash
# Author:
#   Aaron Kuehler
#
# Purpose:
#   Install the dotfiles
#

DOTFILES_HOME="$HOME/.files"
PLATFORM="$(uname)"

function ensure_package_manager() {
    if [ "$PLATFORM" == "Darwin" ] && ! [ -x "$(command -v brew)" ]
    then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        HOST_ARCHITECTURE="$(uname -m)"
        if [[ ${HOST_ARCHITECTURE} == *"x86" ]]
        then
            eval "$(/usr/local/bin/brew shellenv)"
        elif [[ ${HOST_ARCHITECTURE} == *"arm"* ]]
        then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi

        brew update
    elif [ "$PLATFORM" == "Linux" ] && [ -x "$(command -v apt)" ]
    then
        sudo apt update
    fi
}

function ensure_macos_package() {
    local package
    package="$1"

    if ! command -v "$package" &> /dev/null
    then
        brew install "$package"
    fi
}

function ensure_apt_package() {
    local package
    package="$1"

    if ! command -v "$package" &> /dev/null
    then
    sudo apt install -y "$package"
    fi
}

function ensure_macos_dependencies() {
    ensure_macos_package "emacs"
    ensure_macos_package "stow"
    ensure_macos_package "git"
}

function ensure_linux_dependencies() {
    ensure_apt_package "emacs"
    ensure_apt_package "stow"
    ensure_apt_package "git"
}

function ensure_dependencies() {
    if [ "$PLATFORM" == "Darwin" ]
    then
    ensure_macos_dependencies
    elif [ "$PLATFORM" == "Linux" ]
    then
    ensure_linux_dependencies
    fi
}

function ensure_local_dotfiles() {
    if ! [ -d "$DOTFILES_HOME" ]
    then
       git clone git@github.com:indiebrain/.files.git "$DOTFILES_HOME"
    fi
}

function tangle_configuration() {
    FILES=""

    for file in $(ls -1 ./*.org)
    do
    FILES="$FILES \"$file\""
    done

    echo -e "Installing: \n$FILES"
    emacs -Q --batch \
      --eval \
      "(progn
        (require 'org)(require 'ob)(require 'ob-tangle)
         (mapc (lambda (file)
             (find-file (expand-file-name file \"$DOTFILES_HOME\"))
             (org-babel-tangle)
             (kill-buffer)) '($FILES)))"
}

function place_common_configuration() {
    stow --verbose bash git emacs asdf ruby scripts proselint
}

function place_macos_configuration() {
    stow --verbose ssh iterm2
}

function place_gnu_linux_configuration() {
    stow --verbose gnome-terminal
}

function place_configuration() {
    pushd "$DOTFILES_HOME" || echo "Failed to change working directory to '$DOTFILES_HOME'. Aborting" || exit 1
    tangle_configuration
    place_common_configuration

    local system_type=
    system_type="$(uname -s)"
    if [[ "$system_type" == "Darwin" ]]
    then
    place_macos_configuration
    elif [[ "$system_type" == "Linux" ]]
    then
    place_gnu_linux_configuration
    fi

    popd || return
}

ensure_package_manager
ensure_dependencies
ensure_local_dotfiles
place_configuration

exit 0
